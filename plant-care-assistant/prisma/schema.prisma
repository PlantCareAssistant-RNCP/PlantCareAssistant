generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider  = "postgresql"
  url       = env("DATABASE_URL")
  directUrl = env("DIRECT_URL")
}

model Comment {
  comment_id Int         @id @default(autoincrement())
  content    String
  user_id    String      @db.Uuid
  post_id    Int
  photo      String?
  created_at DateTime    @default(now())
  updated_at DateTime?
  deleted_at DateTime?
  POST       Post        @relation(fields: [post_id], references: [post_id], onDelete: Cascade, onUpdate: NoAction)
  USER       UserProfile @relation(fields: [user_id], references: [id], onDelete: Cascade)

  @@map("COMMENT")
}

model Likes {
  post_id    Int
  user_id    String      @db.Uuid
  created_at DateTime    @default(now())
  deleted_at DateTime?
  USER       UserProfile @relation(fields: [user_id], references: [id], onDelete: Cascade)
  POST       Post        @relation(fields: [post_id], references: [post_id], onDelete: Cascade, onUpdate: NoAction)

  @@id([post_id, user_id])
  @@map("LIKES")
}

model Plant {
  plant_id      Int         @id @default(autoincrement())
  plant_name    String
  user_id       String      @db.Uuid
  plant_type_id Int
  photo         String
  created_at    DateTime    @default(now())
  updated_at    DateTime?
  deleted_at    DateTime?
  PLANT_TYPE    PlantType   @relation(fields: [plant_type_id], references: [plant_type_id], onDelete: Cascade, onUpdate: NoAction)
  USER          UserProfile @relation(fields: [user_id], references: [id], onDelete: Cascade)
  POST          Post[]
  USER_PLANT    UserPlant[]
  Event         Event[]

  @@map("PLANT")
}

model PlantType {
  plant_type_id   Int       @id @default(autoincrement())
  plant_type_name String
  created_at      DateTime  @default(now())
  updated_at      DateTime?
  deleted_at      DateTime?
  PLANT           Plant[]

  @@map("PLANT_TYPE")
}

model Post {
  post_id    Int         @id @default(autoincrement())
  title      String
  content    String
  photo      String?
  user_id    String      @db.Uuid
  plant_id   Int
  created_at DateTime    @default(now())
  updated_at DateTime?
  deleted_at DateTime?
  COMMENT    Comment[]
  LIKES      Likes[]
  PLANT      Plant       @relation(fields: [plant_id], references: [plant_id], onDelete: Cascade, onUpdate: NoAction)
  USER       UserProfile @relation(fields: [user_id], references: [id], onDelete: Cascade)
  USERS_POST UsersPost[]

  @@map("POST")
}

model UserProfile {
  id         String    @id @default(uuid()) @db.Uuid
  username   String    @unique
  created_at DateTime  @default(now())
  updated_at DateTime?
  deleted_at DateTime?
  isAdmin    Boolean   @default(false)

  COMMENT    Comment[]
  LIKES      Likes[]
  PLANT      Plant[]
  POST       Post[]
  USERS_POST UsersPost[]
  USER_PLANT UserPlant[]
  Event      Event[]

  @@map("USER_PROFILE")
}

model UsersPost {
  user_id String      @db.Uuid
  post_id Int
  POST    Post        @relation(fields: [post_id], references: [post_id], onDelete: Cascade, onUpdate: NoAction)
  USER    UserProfile @relation(fields: [user_id], references: [id], onDelete: Cascade)

  @@id([user_id, post_id])
  @@map("USERS_POST")
}

model UserPlant {
  user_id  String      @db.Uuid
  plant_id Int
  PLANT    Plant       @relation(fields: [plant_id], references: [plant_id], onDelete: Cascade, onUpdate: NoAction)
  USER     UserProfile @relation(fields: [user_id], references: [id], onDelete: Cascade)

  @@id([user_id, plant_id])
  @@map("USER_PLANT")
}

model Event {
  id        Int         @id @default(autoincrement())
  title     String
  start     DateTime
  end       DateTime?
  user      UserProfile @relation(fields: [userId], references: [id])
  userId    String      @db.Uuid
  plant     Plant?      @relation(fields: [plantId], references: [plant_id])
  plantId   Int?
  createdAt DateTime    @default(now())
  updatedAt DateTime    @updatedAt
  notificationId  String?
  parentEventId   Int?      
  isRecurringInstance Boolean @default(false) 

  parentEvent   Event?   @relation("EventParent", fields: [parentEventId], references: [id])
  childEvents   Event[]  @relation("EventParent")

  @@map("EVENT")
}
